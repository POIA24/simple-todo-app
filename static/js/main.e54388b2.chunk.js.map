{"version":3,"sources":["reportWebVitals.js","atoms.js","components/TodoCreator.js","components/TodoItem.js","components/TodoListFilters.js","components/TodoListStats.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","todoListState","atom","key","default","todoListFilterState","filteredTodoListState","selector","get","filter","list","item","isComplete","todoListStatsState","todoList","totalNum","length","totalCompletedNum","totalUncompletedNum","percentCompleted","TodoCreator","useState","inputValue","setInputValue","useRecoilState","setTodoList","capitalizeTodo","string","charAt","toUpperCase","slice","useEffect","localStorage","setItem","JSON","stringify","className","onSubmit","e","preventDefault","id","uuid","text","createdOn","Date","toString","type","value","onChange","target","IconButton","TodoItem","forwardRef","props","ref","index","findIndex","listItem","replaceItemAtIndex","arr","newValue","removeItemAtIndex","newList","Checkbox","size","checked","onClick","TodoListFilters","setFilter","updateFilter","TodoListStats","useRecoilValue","formattedPercentCompleted","Math","round","App","quote","setQuote","todoListSorted","useSetRecoilState","randomNumber","floor","random","a","axios","response","data","console","log","localTodos","parse","getItem","author","map","todoItem","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e54388b2.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { selector } from \"recoil\";\r\nimport { atom } from \"recoil\";\r\n\r\nexport const todoListState = atom({\r\n\tkey: \"todoListState \", // unique ID\r\n\tdefault: [], // initial value as an empty array\r\n});\r\n\r\nexport const todoListFilterState = atom({\r\n\tkey: \"todoListFilterState\",\r\n\tdefault: \"Show All\",\r\n});\r\n\r\nexport const filteredTodoListState = selector({\r\n\tkey: \"filteredTodoListState\",\r\n\tget: ({ get }) => {\r\n\t\t// grab the filter criteria and the todo list\r\n\t\tconst filter = get(todoListFilterState);\r\n\t\tconst list = get(todoListState);\r\n\r\n\t\t//switch case for the filter we need, in this case is the filter criteria whose value is saved in todoListFilterState atom\r\n\t\tswitch (filter) {\r\n\t\t\tcase \"Show Completed\":\r\n\t\t\t\treturn list.filter((item) => item.isComplete);\r\n\t\t\tcase \"Show Uncompleted\":\r\n\t\t\t\treturn list.filter((item) => !item.isComplete);\r\n\t\t\tdefault:\r\n\t\t\t\treturn list;\r\n\t\t}\r\n\t},\r\n});\r\n\r\nexport const todoListStatsState = selector({\r\n\tkey: \"todoListStatsState\",\r\n\tget: ({ get }) => {\r\n\t\t// grab the information about todo list\r\n\t\tconst todoList = get(todoListState);\r\n\t\tconst totalNum = todoList.length; // how many todos\r\n\t\tconst totalCompletedNum = todoList.filter((item) => item.isComplete).length; // how many completed todos\r\n\t\tconst totalUncompletedNum = totalNum - totalCompletedNum; // how many uncompleted todos\r\n\t\tconst percentCompleted =\r\n\t\t\ttotalNum === 0 ? 0 : (totalCompletedNum / totalNum) * 100; // percent completed\r\n\r\n\t\t// return an object with those value\r\n\t\treturn {\r\n\t\t\ttotalNum,\r\n\t\t\ttotalCompletedNum,\r\n\t\t\ttotalUncompletedNum,\r\n\t\t\tpercentCompleted,\r\n\t\t};\r\n\t},\r\n});\r\n","import \"./TodoCreator.css\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { todoListState } from \"../atoms\"; //you must import your atoms for calling\r\nimport { useEffect, useState } from \"react\";\r\nimport uuid from \"react-uuid\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport AddCircleRoundedIcon from \"@material-ui/icons/AddCircleRounded\";\r\n\r\nconst TodoCreator = () => {\r\n\tconst [inputValue, setInputValue] = useState(\"\");\r\n\tconst [todoList, setTodoList] = useRecoilState(todoListState); //get the value from the recoil state, userecoilState can read/write variables\r\n\r\n\t// setTodoList function is an hook to get a setter function is inside todoList\r\n\t// if you don't need the complete todoList you can call it in this way ⬇⬇⬇\r\n\t// const setTodoList = useSetRecoilState(todoListState);\r\n\r\n\tconst addItem = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (!inputValue) return;\r\n\r\n\t\tsetTodoList([\r\n\t\t\t{\r\n\t\t\t\tid: uuid(), // generete random id with the library uuid\r\n\t\t\t\ttext: capitalizeTodo(inputValue),\r\n\t\t\t\tisComplete: false,\r\n\t\t\t\tcreatedOn: new Date().toString(),\r\n\t\t\t},\r\n\t\t\t...todoList,\r\n\t\t]);\r\n\t\tsetInputValue(\"\");\r\n\t};\r\n\r\n\tconst capitalizeTodo = (string) => {\r\n\t\tif (typeof string !== \"string\") return \"\";\r\n\t\treturn string.charAt(0).toUpperCase() + string.slice(1);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\t//save in local storage every time todos change except when the todos are 0\r\n\t\tif (todoList.length > 0)\r\n\t\t\tlocalStorage.setItem(\"todoListStorage\", JSON.stringify(todoList));\r\n\t}, [todoList]);\r\n\r\n\treturn (\r\n\t\t<div className=\"todoCreator\">\r\n\t\t\t<form onSubmit={addItem}>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tvalue={inputValue}\r\n\t\t\t\t\tonChange={({ target: { value } }) => setInputValue(value)} //set the recoil variable at the same way of useState hook\r\n\t\t\t\t/>\r\n\t\t\t\t<IconButton type=\"submit\">\r\n\t\t\t\t\t<AddCircleRoundedIcon />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TodoCreator;\r\n","import \"./TodoItem.css\";\r\nimport { forwardRef } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { todoListState } from \"../atoms\"; //you must import your variables for calling\r\n\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport ClearRoundedIcon from \"@material-ui/icons/ClearRounded\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nconst TodoItem = forwardRef((props, ref) => {\r\n\tconst { item } = props;\r\n\tconst [todoList, setTodoList] = useRecoilState(todoListState);\r\n\tconst index = todoList.findIndex((listItem) => listItem === item);\r\n\r\n\t//{ target: { value } } ➡ decontructuring of the event, that means e.target.value\r\n\tconst editItemText = ({ target: { value } }) => {\r\n\t\tconst newList = replaceItemAtIndex(todoList, index, {\r\n\t\t\t...item,\r\n\t\t\ttext: value,\r\n\t\t});\r\n\r\n\t\tsetTodoList(newList);\r\n\t};\r\n\r\n\tconst toggleItemCompletion = () => {\r\n\t\tconst newList = replaceItemAtIndex(todoList, index, {\r\n\t\t\t...item,\r\n\t\t\tisComplete: !item.isComplete,\r\n\t\t});\r\n\r\n\t\tsetTodoList(newList);\r\n\t};\r\n\r\n\tconst deleteItem = () => {\r\n\t\tconst newList = removeItemAtIndex(todoList, index);\r\n\r\n\t\tsetTodoList(newList);\r\n\r\n\t\t//if the todoList is empty set the local storage to empty\r\n\t\tif (newList.length === 0) {\r\n\t\t\tlocalStorage.setItem(\"todoListStorage\", JSON.stringify(newList));\r\n\t\t}\r\n\t};\r\n\r\n\tconst replaceItemAtIndex = (arr, index, newValue) => {\r\n\t\t// return new array in this way ⬇\r\n\t\t//\r\n\t\t// 1) ...arr.slice(0, index) means ➡ extract all the value inside the array from value 0 to index\r\n\t\t// (index is the value of the element you are tring to modify)\r\n\t\t//\r\n\t\t// 2) add the newValue to the array\r\n\t\t//\r\n\t\t// 3) ...arr.slice(index + 1) means ➡ extract all the value inside the array from index + 1 till the end\r\n\t\treturn [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\r\n\t};\r\n\r\n\tconst removeItemAtIndex = (arr, index) => {\r\n\t\t// same explaination of replaceItemAtIndex() without the insert of the new value\r\n\t\t// basically return a new array skipping the index we want to delete\r\n\t\treturn [...arr.slice(0, index), ...arr.slice(index + 1)];\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div ref={ref} className={`todoItem  ${item.isComplete}`}>\r\n\t\t\t<input type=\"text\" value={item.text} onChange={editItemText} />\r\n\t\t\t<Checkbox\r\n\t\t\t\tsize=\"small\"\r\n\t\t\t\tchecked={item.isComplete}\r\n\t\t\t\tonChange={toggleItemCompletion}\r\n\t\t\t/>\r\n\t\t\t<IconButton onClick={deleteItem}>\r\n\t\t\t\t<ClearRoundedIcon />\r\n\t\t\t</IconButton>\r\n\t\t</div>\r\n\t);\r\n});\r\n\r\nexport default TodoItem;\r\n","import \"./TodoListFilters.css\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { todoListFilterState } from \"../atoms\"; //you must import your variables for calling\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nimport AssignmentLateRoundedIcon from \"@material-ui/icons/AssignmentLateRounded\";\r\nimport AssignmentTurnedInRoundedIcon from \"@material-ui/icons/AssignmentTurnedInRounded\";\r\nimport AssignmentRoundedIcon from \"@material-ui/icons/AssignmentRounded\";\r\n\r\nconst TodoListFilters = () => {\r\n\tconst [filter, setFilter] = useRecoilState(todoListFilterState);\r\n\r\n\t// { target: { value } } ➡➡ e.target.value\r\n\tconst updateFilter = ({ target: { value } }) => {\r\n\t\tsetFilter(value); // update the filter\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"todoListFilters\">\r\n\t\t\t<IconButton value=\"Show All\" onClick={updateFilter}>\r\n\t\t\t\t<AssignmentRoundedIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t<IconButton value=\"Show Uncompleted\" onClick={updateFilter}>\r\n\t\t\t\t<AssignmentLateRoundedIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t<IconButton value=\"Show Completed\" onClick={updateFilter}>\r\n\t\t\t\t<AssignmentTurnedInRoundedIcon />\r\n\t\t\t</IconButton>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TodoListFilters;\r\n","import \"./TodoListStats.css\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { todoListStatsState } from \"../atoms\"; //you must import your variables for calling\r\nimport { CircularProgressbarWithChildren } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\nconst TodoListStats = () => {\r\n\tconst {\r\n\t\t// totalNum,\r\n\t\t// totalCompletedNum,\r\n\t\t// totalUncompletedNum,\r\n\t\tpercentCompleted,\r\n\t} = useRecoilValue(todoListStatsState);\r\n\r\n\tconst formattedPercentCompleted = Math.round(percentCompleted);\r\n\r\n\treturn (\r\n\t\t<div className=\"todoListStats\">\r\n\t\t\t<CircularProgressbarWithChildren\r\n\t\t\t\tvalue={formattedPercentCompleted}\r\n\t\t\t\ttext={`${formattedPercentCompleted}%`}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TodoListStats;\r\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { todoListState, filteredTodoListState } from \"./atoms\"; //you must import your atoms for calling\nimport axios from \"axios\";\nimport FlipMove from \"react-flip-move\";\n\n//components\nimport TodoCreator from \"./components/TodoCreator\";\nimport TodoItem from \"./components/TodoItem\";\nimport TodoListFilters from \"./components/TodoListFilters\";\nimport TodoListStats from \"./components/TodoListStats\";\n\nimport { IconButton } from \"@material-ui/core\";\nimport InstagramIcon from \"@material-ui/icons/Instagram\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\n\nfunction App() {\n\tconst [quote, setQuote] = useState({ text: \"Loading...\" });\n\tconst todoListSorted = useRecoilValue(filteredTodoListState); //get the value from the recoil state, useRecoilValue can only read variables that's why the todoList below is imported\n\tconst setTodoList = useSetRecoilState(todoListState); // get the value from the recoil state, useSetRecoilState can only set variables\n\n\tuseEffect(() => {\n\t\tconst max = 1643; //max index of the array who come back from the api\n\t\tconst randomNumber = Math.floor(Math.random() * (max - 0) + 0);\n\n\t\t//fetching the quote from the api\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await axios.get(\"https://type.fit/api/quotes\");\n\t\t\t\tsetQuote(response.data[randomNumber]);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t})();\n\n\t\t//check if the local storage has got something inside, if yes, set the todoList state with those value\n\t\tconst localTodos = JSON.parse(localStorage.getItem(\"todoListStorage\"));\n\t\tif (localTodos) setTodoList([...localTodos]);\n\t}, []);\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<h1 className=\"app__quote\">\n\t\t\t\t{quote.text}\n\t\t\t\t<br />\n\t\t\t\t<span className=\"app__quote-sub\">{quote.author}</span>\n\t\t\t</h1>\n\n\t\t\t<TodoListStats />\n\t\t\t<TodoListFilters />\n\t\t\t<TodoCreator />\n\n\t\t\t<div className=\"app__todoList\">\n\t\t\t\t<FlipMove>\n\t\t\t\t\t{todoListSorted.map((todoItem) => (\n\t\t\t\t\t\t<TodoItem key={todoItem.id} item={todoItem} />\n\t\t\t\t\t))}\n\t\t\t\t</FlipMove>\n\t\t\t</div>\n\n\t\t\t<div className=\"app__aboutMe\">\n\t\t\t\t<IconButton target=\"blank\" href=\"https://github.com/deSimons\">\n\t\t\t\t\t<GitHubIcon />\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton target=\"blank\" href=\"https://www.instagram.com/de_simons/\">\n\t\t\t\t\t<InstagramIcon />\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton\n\t\t\t\t\ttarget=\"blank\"\n\t\t\t\t\thref=\"https://www.linkedin.com/in/luca-de-simoni/\"\n\t\t\t\t>\n\t\t\t\t\t<LinkedInIcon />\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./App\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<RecoilRoot>\n\t\t\t<App />\n\t\t</RecoilRoot>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}